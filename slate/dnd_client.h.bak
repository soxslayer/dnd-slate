#ifndef __DND_CLIENT__
#define __DND_CLIENT__

#include <string>
#include <list>
#include <utility>
#include <sys/types.h>

#include <boost/asio.hpp>
#include <glibmm.h>
#include <sigc++/sigc++.h>

#include "client.h"
#include "uuid.h"
#include "dnd_messages.h"

/* This class has two major sections, a network thread handler and a GUI side
 * handler.  The network side handles the boost::asio::io_service side of
 * things.  When it gets a message it puts it into a queue and signals the GUI
 * side using a Gtk::Dispatcher.  The GUI side connects to the Dispatcher's
 * signal and dequeues the message. */
class DnDClient : public sigc::trackable
{
public:
  DnDClient (std::string& addr,
             short port);
  ~DnDClient ();

  /* Messages to the server */
  void user_add_req (const std::string& name);

  /* Message from the server */
  sigc::signal<void> signal_disconnect;
  sigc::signal<void, Engine::UuidManager::Uuid, const std::string&>
    signal_user_add_resp;

private:
  Glib::Thread* _network_worker_thread;
  boost::asio::io_service _io_service;
  Engine::Client _client;
  Glib::Dispatcher _dispatcher;
  Glib::Mutex _queue_mutex;
  std::list<std::pair<void*, size_t> > _queue;

  /* GUI side of the message handling */
  void dispatch_handler ();

  /* These are run in the context of the network_thread */
  void network_thread ();
  void signal_gui (void* message,
                   size_t size);
  void bg_error_handler (const boost::system::error_code& ec);
  void bg_message_handler (void* message,
                           size_t size);
};

#endif /* __DND_CLIENT__ */
